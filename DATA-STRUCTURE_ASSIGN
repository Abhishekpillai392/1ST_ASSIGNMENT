Q.1 Create a structure Student ( rollno, name), Create a structure variable and Access the members using structure variable.

#include<stdio.h>

typedef struct details
{
	char name[20];
	int rollno;
}details;


int main()
{
	details ds1,ds2,ds3;
	
	ds1.rollno = 1;
	ds2.rollno = 2;
	ds3.rollno = 3;
	
	strcpy(ds1.name,"ABHISHEK");
	strcpy(ds2.name,"NIMESH");
	strcpy(ds3.name,"SALONI");
	
	fflush(stdin);
	
	printf("DETAILS OF STUDENTS:1\tNAME : %s\nROLLNO. : %d\n",ds1.name,ds1.rollno);
    printf("DETAILS OF STUDENTS:2\tNAME : %s\nROLLNO. : %d\n",ds2.name,ds2.rollno);
    printf("DETAILS OF STUDENTS:3\tNAME : %s\nROLLNO. : %d\n",ds3.name,ds3.rollno);
}

=====================================================================================================================================
Q.2 Create a structure pointer which can access the members of the structure Student and print member values.

#include<stdio.h>

struct student
{
	int rollno;
	char name[20];
	
};

int main()
{
	struct student *s1,s;
	s1 = &s;
	s1->rollno=101;
	strcpy(s1->name,"abhishek");
	
	printf("ROLLNO : %d , NAME : %s",s1->rollno,s1->name);  
}

==================================================================================================================================
Q.3 Create an array of structure which is used to store 3 employee records.

#include<stdio.h>
#include<stdlib.h>
struct address
{
	char city[20];
	int bldg_no;
};

typedef struct emp_records
{
	char name[20];
	int employee_id;
	struct address ad;	
}emp_records;


int main()
{
	emp_records e[3];
	
	char nm[20];
	char city_name[20];
	int i;
	
	for(i=0;i<3;i++)
	{
	printf("EMPLOYEE:%d DETAILS\n",i+1);
	printf("NAME :");
	gets(nm);
	strcpy(e[i].name,nm);
	
	printf("EMPLOYEE ID : ");
	scanf("%d",&e[i].employee_id);
	
	fflush(stdin);
	printf("CITY : ");
	gets(city_name);
	strcpy(e[i].ad.city,city_name);
	 
	printf("BLDG NO. : ");
	scanf("%d",&e[i].ad.bldg_no);
	
	fflush(stdin);
    }
	for(i=0;i<3;i++)
	{
	printf("\n\n\tNAME : %s\nEMPLOYEE ID : %d\nCITY : %s\nBLDG NO. %d\n",e[i].name,e[i].employee_id,e[i].ad.city,e[i].ad.bldg_no);
    }
}
   
========================================================================================================================================   
Q.4 Create a float pointer which points to the float array and access all elements of array using float pointer

#include<stdio.h>

void function(float *p)
{
	int i;
	
	for(i=0;i<4;i++)
	printf("ELEMENTS : %f\n",*(p+i));
}

int main()
{
	float array[4]={10,12,14,16};
	float *A;
	A = &array;
	
	function(A);
	free(A);
}

===================================================================================================================================
Q.5 Create an integer pointer for which memory is allocated dynamically.

#include<stdio.h>
#include<stdlib.h>

int main()
{
	int *p;
	
	p = (int*)malloc(sizeof(int));
	
	*p = 400;
	
	printf("VALUE : %d",*p);
	
	free(p);
}
===========================================================================================================================
Q.6 Create a stack of 5 characters and display all elements.

#include<stdio.h>
#define SIZE 5

typedef struct stack
{
	int top;
	char elements[SIZE];
}stack;

void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,char item)
{
	if(sp->top==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(sp->top==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->top--];
	return x;
}

void display(stack *sp)
{
	int i;
	for(i=0;i<=sp->top;i++)
	{
		printf("CHARACTERS ARE : %c\n",sp->elements[i]);
	}
}
int main()
{
    stack e;
	initialize(&e);
	push(&e,'a');
	push(&e,'b');
	push(&e,'c');
	push(&e,'d');
	push(&e,'f');
	
	display(&e);
		
}

====================================================================================================================
Q.7 Create a stack of 5 names of employees and delete the last name and display it. 

#include<stdio.h>
#include<stdlib.h>
#define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}Aaa;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}Bbb;


void Ainitialize(Aaa *sp)
{
	sp->Atop=-1;
}
void Binitialize(Bbb *sp)
{
	sp->Btop=-1;
}

void Apush(Aaa *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(Bbb *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(Aaa *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(Bbb *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(Aaa*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(Bbb *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(Aaa *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(Bbb *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(Aaa *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(Bbb *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}

====================================================================================================================
Q.8 Create two stacks A and B . A contains 3 alphabets and B contains 3 numbers. Display Both stacks.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}Aaa;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}Bbb;


void Ainitialize(Aaa *sp)
{
	sp->Atop=-1;
}
void Binitialize(Bbb *sp)
{
	sp->Btop=-1;
}

void Apush(Aaa *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(Bbb *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(Aaa *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(Bbb *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(Aaa*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(Bbb *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(Aaa *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(Bbb *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(Aaa *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(Bbb *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}



====================================================================================================================
Q.9 Create a queue which contains 5 double values and print all values.

#include<stdio.h>
#define SIZE 5


typedef struct queue
{
	int front;
	int rear;
	double elements[SIZE];
}queue;

void initialize(queue *sp)
{
	sp->front=-1;
	sp->rear=-1;
}

void add(queue *sp,double item)
{
	if(sp->rear==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    {
    	if(sp->front == -1)
    	sp->front=0;
	
	sp->elements[++sp->rear]=item;
    }
}

int rem(queue *sp)
{
	char x;
	if(sp->front==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->front++];
	return x;
}

void display(queue *sp)
{
	int i;
	for(i=sp->front;i<=sp->rear;i++)
	{
		printf("DOUBLE VALUES ARE : %lf\n",sp->elements[i]);
	}
}
int main()
{
    queue e;
	initialize(&e);
	add(&e,10.234);
	add(&e,11.234);
	add(&e,12.234);
	add(&e,13.234);
	add(&e,14.234);
	
	display(&e);
		
}
=====================================================================================================================
Q.10 Create a queue which contains 5 numbers and print the square value of every element of the queue.

#include<stdio.h>
#define SIZE 5

typedef struct queue
{
	int front;
	int rear;
	int elements[SIZE];
}queue;

void initialize(queue *sp)
{
	sp->front=-1;
	sp->rear=-1;
}

void add(queue *sp,int item)
{
	if(sp->rear==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    {
    	if(sp->front ==-1)
    	sp->front=0;
	    sp->elements[++sp->rear]=item;
    }
}

int rem(queue *sp)
{
	char x;
	if(sp->front==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->front++];
	return x;
}

void display(queue *sp)
{
	int i;
	for(i=sp->front;i<=sp->rear;i++)
	{
		printf("SQUARE VALUES ARE : %d\n",(sp->elements[i])*(sp->elements[i]));
	}
}
int main()
{
    queue e;
	initialize(&e);
	add(&e,5);
	add(&e,10);
	add(&e,15);
	add(&e,20);
	add(&e,25);
	
	display(&e);
		
}
===========================================================================================================
Q.11 Create a stack which contains ASCII values for alphabets and print Alphabets.

#include<stdio.h>

#include<stdio.h>
#include<stdlib.h>
#define SIZE 26
typedef struct 
{
	int top;
	int elements[SIZE];
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

//FOR ADDING VALUES TO IT
void push(stack *sp,int item)
{
	if(sp->top == SIZE-1)
	printf("\nstack overflow\n");
	else
	sp->elements[++sp->top]=item;   
	
}

//OVERWRITTING
int pop(stack *sp)
{
	int x;             //BECAUSE WE WANT TO RETURN BACK THE VALUE  
	if(sp->top == -1)
	printf("\nstack underflow");
	else
    x=sp->elements[sp->top--];
    return x;
}

void display(stack *sp)
{
     int i;
     
     for(i=sp->top;i!=-1;i--)
    {
        printf("%c\n",sp->elements[i]);
	}
}
int main()
{	
	stack s1;
	
	initialize(&s1);
	
	int i;
	for(i=65;i<=90;i++)
	{
		push(&s1,i);
	}
    display(&s1);
}

=================================================================================================================================
Q.12 Take 10 numbers from user, Make two stacks as Even & Odd, Even stack contains even numbers , Odd stack contains odd numbers.


=================================================================================================================================
Q.13 Make a program to copy elements of one stack to another.


=================================================================================================================================
Q.14 Read 5 numbers from user and store it in a stack.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 5

typedef struct sk
{
	int top;
	int elements[SIZE];
}stack;

void initialize(stack *s1)
{
	s1->top = -1;
}

void push(stack *s1,int a)
{
	if(s1 == SIZE-1)
	printf("\nSTACK OVERFLOW\n");
	else
	s1->elements[++s1->top]=a;
}

int pop(stack *s1)
{
	int x;
	if(s1 == -1)
	printf("\nSTACK UNDERFLOW\n");
	else
	x=s1->elements[s1->top--];
return x;
}

display (stack *s1,int c)
{
	int x,y;
	for(x=0;x<c;x++)
	{
	printf("ENTER YOUR NUMBERS %d : ",x+1);
	scanf("%d",&y);
	push(s1,y);
    }
    
	for(x=0;x<c;x++)
	{
	printf("YOUR NO. ARE : %d\n",s1->elements[x]);
    }
}

int main()
{
	stack *s1;
	
	s1=(stack*)malloc(sizeof(stack));
	
	initialize(s1);
	
	int x=5;
	
	display(s1,x);
}
========================================================================================================================
Q.15 Create a Link list of 5 nodes which stores information as a character.

#include<stdio.h>
#include<stdlib.h>

typedef struct nd             
{                           
    char data;
    struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

node* createNode(char no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void initalize(list *p)
{
	p->head = NULL;
	p->tail = NULL;
}
void insertAtail(list *p,char x)
{
	node *np;
	np = createNode(x);
	if(p->head==NULL)
	p->head = np;
	else
	p->tail->next = np;
	p->tail = np;
}

void traverse(list *p)
{
    node *sp;
    sp = p->head;
    
    while(sp!=NULL)
    {
    	printf("%c",sp->data);
    	sp=sp->next;
	}
}
int main()
{    
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
    	printf("MEMORY UNVAVAILABLE");
    	exit(0);
	}
	
	initalize(p);
	insertAtail(p,'A');
	insertAtail(p,'B');
	insertAtail(p,'C');
	insertAtail(p,'D');
	insertAtail(p,'E');
	
	traverse(p);
	
	free(p);
    
}

=========================================================================================================================================

Q.16 Write a program to count the number of nodes in the link list.


=========================================================================================================================================
Q.17 Create a Link list of 3 nodes containing 3 double values and print the average of 3 numbers.

#include<stdio.h>
#include<stdlib.h>

typedef struct nd             
{                           
    double data;
    struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

node* createNode(double no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void initalize(list *p)
{
	p->head = NULL;
	p->tail = NULL;
}
void insertAtail(list *p,double x)
{
	node *np;
	np = createNode(x);
	if(p->head==NULL)
	p->head = np;
	else
	p->tail->next = np;
	p->tail = np;
}

void traverse(list *p)
{
    node *sp;
    sp = p->head;
    
    while(sp!=NULL)
    {
    	printf("%lf\n",sp->data);
    	sp=sp->next;	
    	
    	printf("\n");
	}
	sp=p->head;
	float sum=0;
	while(sp!=NULL)
	{
		sum=(sum+sp->data);
		sp=sp->next;
	}
	printf("\nSUM = %f",sum);
	float avg=0;
	avg=sum/3;
	printf("\nAVERAGE = %f",avg);
}

int main()
{    
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
    	printf("MEMORY UNVAVAILABLE");
    	exit(0);
	}
	
	initalize(p);
	insertAtail(p,12.357);
	insertAtail(p,14.2345);
	insertAtail(p,17.234);
	
	traverse(p);
	
	free(p);
    
}
