Q.1 Create a structure Student ( rollno, name), Create a structure variable and Access the members using structure variable.

#include<stdio.h>

typedef struct details
{
	char name[20];
	int rollno;
}details;


int main()
{
	details ds1,ds2,ds3;
	
	ds1.rollno = 1;
	ds2.rollno = 2;
	ds3.rollno = 3;
	
	strcpy(ds1.name,"ABHISHEK");
	strcpy(ds2.name,"NIMESH");
	strcpy(ds3.name,"SALONI");
	
	fflush(stdin);
	
	printf("DETAILS OF STUDENTS:1\tNAME : %s\nROLLNO. : %d\n",ds1.name,ds1.rollno);
    printf("DETAILS OF STUDENTS:2\tNAME : %s\nROLLNO. : %d\n",ds2.name,ds2.rollno);
    printf("DETAILS OF STUDENTS:3\tNAME : %s\nROLLNO. : %d\n",ds3.name,ds3.rollno);
}

=====================================================================================================================================
Q.2 Create a structure pointer which can access the members of the structure Student and print member values.

#include<stdio.h>

struct student
{
	int rollno;
	char name[20];
	
};

int main()
{
	struct student *s1,s;
	s1 = &s;
	s1->rollno=101;
	strcpy(s1->name,"abhishek");
	
	printf("ROLLNO : %d , NAME : %s",s1->rollno,s1->name);  
}

==================================================================================================================================
Q.3 Create an array of structure which is used to store 3 employee records.

#include<stdio.h>
#include<stdlib.h>
struct address
{
	char city[20];
	int bldg_no;
};

typedef struct emp_records
{
	char name[20];
	int employee_id;
	struct address ad;	
}emp_records;


int main()
{
	emp_records e[3];
	
	char nm[20];
	char city_name[20];
	int i;
	
	for(i=0;i<3;i++)
	{
	printf("EMPLOYEE:%d DETAILS\n",i+1);
	printf("NAME :");
	gets(nm);
	strcpy(e[i].name,nm);
	
	printf("EMPLOYEE ID : ");
	scanf("%d",&e[i].employee_id);
	
	fflush(stdin);
	printf("CITY : ");
	gets(city_name);
	strcpy(e[i].ad.city,city_name);
	 
	printf("BLDG NO. : ");
	scanf("%d",&e[i].ad.bldg_no);
	
	fflush(stdin);
    }
	for(i=0;i<3;i++)
	{
	printf("\n\n\tNAME : %s\nEMPLOYEE ID : %d\nCITY : %s\nBLDG NO. %d\n",e[i].name,e[i].employee_id,e[i].ad.city,e[i].ad.bldg_no);
    }
}
   
========================================================================================================================================   
Q.4 Create a float pointer which points to the float array and access all elements of array using float pointer

#include<stdio.h>

void function(float *p)
{
	int i;
	
	for(i=0;i<4;i++)
	printf("ELEMENTS : %f\n",*(p+i));
}

int main()
{
	float array[4]={10,12,14,16};
	float *A;
	A = &array;
	
	function(A);
	free(A);
}

===================================================================================================================================
Q.5 Create an integer pointer for which memory is allocated dynamically.

#include<stdio.h>
#include<stdlib.h>

int main()
{
	int *p;
	
	p = (int*)malloc(sizeof(int));
	
	*p = 400;
	
	printf("VALUE : %d",*p);
	
	free(p);
}
===========================================================================================================================
Q.6 Create a stack of 5 characters and display all elements.

#include<stdio.h>
#define SIZE 5

typedef struct stack
{
	int top;
	char elements[SIZE];
}stack;

void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,char item)
{
	if(sp->top==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(sp->top==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->top--];
	return x;
}

void display(stack *sp)
{
	int i;
	for(i=0;i<=sp->top;i++)
	{
		printf("CHARACTERS ARE : %c\n",sp->elements[i]);
	}
}
int main()
{
    stack e;
	initialize(&e);
	push(&e,'a');
	push(&e,'b');
	push(&e,'c');
	push(&e,'d');
	push(&e,'f');
	
	display(&e);
		
}

====================================================================================================================
Q.7 Create a stack of 5 names of employees and delete the last name and display it. 

#include<stdio.h>
#include<stdlib.h>
#define SIZE 10
typedef struct st
{
	int top;
	char elements[10][10];
}stack;

void initialize(stack *sp)
{
	sp->top=-1;
}

//FOR ADDING VALUES TO IT
void push(stack *sp,char* item)
{
	if(sp->top == SIZE-1)
	printf("\nstack overflow\n");
	else
	strcpy(sp->elements[++sp->top],item);   
	
}

//OVERWRITTING
int pop(stack *sp)
{
	int x;             //BECAUSE WE WANT TO RETURN BACK THE VALUE  
	if(sp->top == -1)
	printf("\nstack underflow");
	else
    x=sp->elements[sp->top--];
    return x;
}

void display(stack *sp)
{
	int i;
	
	for(i=sp->top;i!=-1;i--)
    {
    	printf("%s\n",*(sp->elements+i));
	}
}
int main()
{
	stack e1;
	
	initialize(&e1);
	push(&e1,"ABHISHEK");
	push(&e1,"HEMANT");
	push(&e1,"SALONI");
	push(&e1,"NIMESH");
	push(&e1,"VISHAL");
	
	display(&e1);
	
	printf("\n\n");
	pop(&e1);
	
	display(&e1);
}

====================================================================================================================
Q.8 Create two stacks A and B . A contains 3 alphabets and B contains 3 numbers. Display Both stacks.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}Aaa;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}Bbb;


void Ainitialize(Aaa *sp)
{
	sp->Atop=-1;
}
void Binitialize(Bbb *sp)
{
	sp->Btop=-1;
}

void Apush(Aaa *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(Bbb *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(Aaa *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(Bbb *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(Aaa*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(Bbb *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(Aaa *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(Bbb *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(Aaa *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(Bbb *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}
int main()
{
	Aaa a;
	
	Ainitialize(&a);
	
	push(&a,'a');
	push(&a,'b');
	push(&a,'c');
	
	A_display(&a);
	
	Bbb b;
	Binitialize(&b);
	Bpush(&b,10);
	Bpush(&b,20);
	Bpush(&b,30);
	
	B_display(&b);
	
}


====================================================================================================================
Q.9 Create a queue which contains 5 double values and print all values.

#include<stdio.h>
#define SIZE 5


typedef struct queue
{
	int front;
	int rear;
	double elements[SIZE];
}queue;

void initialize(queue *sp)
{
	sp->front=-1;
	sp->rear=-1;
}

void add(queue *sp,double item)
{
	if(sp->rear==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    {
    	if(sp->front == -1)
    	sp->front=0;
	
	sp->elements[++sp->rear]=item;
    }
}

int rem(queue *sp)
{
	char x;
	if(sp->front==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->front++];
	return x;
}

void display(queue *sp)
{
	int i;
	for(i=sp->front;i<=sp->rear;i++)
	{
		printf("DOUBLE VALUES ARE : %lf\n",sp->elements[i]);
	}
}
int main()
{
    queue e;
	initialize(&e);
	add(&e,10.234);
	add(&e,11.234);
	add(&e,12.234);
	add(&e,13.234);
	add(&e,14.234);
	
	display(&e);
		
}
=====================================================================================================================
Q.10 Create a queue which contains 5 numbers and print the square value of every element of the queue.

#include<stdio.h>
#define SIZE 5

typedef struct queue
{
	int front;
	int rear;
	int elements[SIZE];
}queue;

void initialize(queue *sp)
{
	sp->front=-1;
	sp->rear=-1;
}

void add(queue *sp,int item)
{
	if(sp->rear==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    {
    	if(sp->front ==-1)
    	sp->front=0;
	    sp->elements[++sp->rear]=item;
    }
}

int rem(queue *sp)
{
	char x;
	if(sp->front==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->front++];
	return x;
}

void display(queue *sp)
{
	int i;
	for(i=sp->front;i<=sp->rear;i++)
	{
		printf("SQUARE VALUES ARE : %d\n",(sp->elements[i])*(sp->elements[i]));
	}
}
int main()
{
    queue e;
	initialize(&e);
	add(&e,5);
	add(&e,10);
	add(&e,15);
	add(&e,20);
	add(&e,25);
	
	display(&e);
		
}
===========================================================================================================
Q.11 Create a stack which contains ASCII values for alphabets and print Alphabets.

#include<stdio.h>

#include<stdio.h>
#include<stdlib.h>
#define SIZE 26
typedef struct 
{
	int top;
	int elements[SIZE];
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

//FOR ADDING VALUES TO IT
void push(stack *sp,int item)
{
	if(sp->top == SIZE-1)
	printf("\nstack overflow\n");
	else
	sp->elements[++sp->top]=item;   
	
}

//OVERWRITTING
int pop(stack *sp)
{
	int x;             //BECAUSE WE WANT TO RETURN BACK THE VALUE  
	if(sp->top == -1)
	printf("\nstack underflow");
	else
    x=sp->elements[sp->top--];
    return x;
}

void display(stack *sp)
{
     int i;
     
     for(i=sp->top;i!=-1;i--)
    {
        printf("%c\n",sp->elements[i]);
	}
}
int main()
{	
	stack s1;
	
	initialize(&s1);
	
	int i;
	for(i=65;i<=90;i++)
	{
		push(&s1,i);
	}
    display(&s1);
}

=================================================================================================================================
Q.12 Take 10 numbers from user, Make two stacks as Even & Odd, Even stack contains even numbers , Odd stack contains odd numbers.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 10

typedef struct Odd_st
{
int Atop;
int Aelements[SIZE];
}oddno;

typedef struct Even_st 
{
int Btop;
int Belements[SIZE];
}evenno;

void Ainitialize(oddno *s) 
{
s->Atop=-1;
}
void Binitialize(evenno *s)
{
s->Btop=-1;
}

void Apush(oddno *s,char item) 
{
if(A_is_full(s))
printf("\nStack overflow\n");
else
s->Aelements[++s->Atop]=item;
}
void Bpush(evenno *s,int item) 
{
if(B_is_full(s))
printf("\nStack overflow\n");
else
s->Belements[++s->Btop]=item;
}


int Apop(oddno *s) 
{
int x;
if(A_is_empty(s))
printf("\nStack underflow");
else
x=s->Aelements[s->Atop--];

return x;
} 
int Bpop(evenno *s)
{
int x;
if(B_is_empty(s))
printf("\nStack underflow");
else
x=s->Belements[s->Btop--];

return x; 
}

int A_is_full(oddno*s) 
{
if(s->Atop == SIZE-1)

return 1; 
else
return 0;
}

int B_is_full(evenno *s) 
{
if(s->Btop == SIZE-1)
return 1;
else
return 0;
}

int A_is_empty(oddno *s) 
{
if(s->Atop == -1)
return 1;
else
return 0;
}

 
int B_is_empty(evenno *s)
{
if(s->Btop == -1)
return 1;
else
return 0;
}

void Adisplay(oddno *a)
{
	int x;
	for(x=a->Atop;x!=-1;x--)
	{
		printf("ODD NO ARE : %d\n",a->Aelements[x]);
	}
}

void Bdisplay(evenno *b)
{
	int x;
	for(x=b->Btop;x!=-1;x--)
	{
		printf("EVEN NUMBER : %d\n",b->Belements[x]);
	}
}

int main()
{
	oddno a;
	evenno b;
	
	Ainitialize(&a);
	Binitialize(&b);
	
	int i;

	for(i=0;i<SIZE;i++)
	{
		int val=i%2;
		switch(val)
		{
		case 1:
		Apush(&a,i);
		break;
		
		case 0:
		Bpush(&b,i);
		break;
	    }
    }
    Adisplay(&a);
    Bdisplay(&b);
}
=================================================================================================================================
Q.13 Make a program to copy elements of one stack to another.

     #include<stdio.h>
     #include<stdlib.h>
     #include<string.h>
     #define SIZE 5

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}Astack;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}Bstack;


void Ainitialize(Astack *sp)
{
	sp->Atop=-1;
}
void Binitialize(Bstack *sp)
{
	sp->Btop=-1;
}

void Apush(Astack *sp,int item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(Bstack *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int A_is_full(Astack*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(Bstack*sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}


int A_is_empty(Astack *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(Bstack *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}

Adisplay(Astack *sp)
{
	int i;
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%d\n",sp->Aelements[i]);
	}
}

Bdisplay(Bstack *sp)
{
	int x;
	for(x=sp->Btop;x!=-1;x--)
	{
		printf("%d\n",sp->Belements[x]);
	}
	printf("\n");
}

int main()
{
	Astack a;
	Bstack b;
	
	Ainitialize(&a);
	Binitialize(&b);
	
	int i;
	for(i=0;i<SIZE;i++)
	{
		Apush(&a,i);
		Bpush(&b,i);
	}
	Adisplay(&a);
	printf("\n");
	Bdisplay(&b);	
}
=================================================================================================================================
Q.14 Read 5 numbers from user and store it in a stack.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 5

typedef struct sk
{
	int top;
	int elements[SIZE];
}stack;

void initialize(stack *s1)
{
	s1->top = -1;
}

void push(stack *s1,int a)
{
	if(s1 == SIZE-1)
	printf("\nSTACK OVERFLOW\n");
	else
	s1->elements[++s1->top]=a;
}

int pop(stack *s1)
{
	int x;
	if(s1 == -1)
	printf("\nSTACK UNDERFLOW\n");
	else
	x=s1->elements[s1->top--];
return x;
}

display (stack *s1,int c)
{
	int x,y;
	for(x=0;x<c;x++)
	{
	printf("ENTER YOUR NUMBERS %d : ",x+1);
	scanf("%d",&y);
	push(s1,y);
    }
    
	for(x=0;x<c;x++)
	{
	printf("YOUR NO. ARE : %d\n",s1->elements[x]);
    }
}

int main()
{
	stack *s1;
	
	s1=(stack*)malloc(sizeof(stack));
	
	initialize(s1);
	
	int x=5;
	
	display(s1,x);
}
========================================================================================================================
Q.15 Create a Link list of 5 nodes which stores information as a character.

#include<stdio.h>
#include<stdlib.h>

typedef struct nd             
{                           
    char data;
    struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

node* createNode(char no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void initalize(list *p)
{
	p->head = NULL;
	p->tail = NULL;
}
void insertAtail(list *p,char x)
{
	node *np;
	np = createNode(x);
	if(p->head==NULL)
	p->head = np;
	else
	p->tail->next = np;
	p->tail = np;
}

void traverse(list *p)
{
    node *sp;
    sp = p->head;
    
    while(sp!=NULL)
    {
    	printf("%c",sp->data);
    	sp=sp->next;
	}
}
int main()
{    
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
    	printf("MEMORY UNVAVAILABLE");
    	exit(0);
	}
	
	initalize(p);
	insertAtail(p,'A');
	insertAtail(p,'B');
	insertAtail(p,'C');
	insertAtail(p,'D');
	insertAtail(p,'E');
	
	traverse(p);
	
	free(p);
    
}

=========================================================================================================================================

Q.16 Write a program to count the number of nodes in the link list.

#include<stdio.h>
#include<stdlib.h>
//MULTIPLE NODES
typedef struct st
{
	int data;
	struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

void initialize(list *s)
{
	s->head = NULL;
	s->tail = NULL;
}

node* createnode(int x)
{
	node *sp;
	
	sp = (node*)malloc(sizeof(node));
	
	if(sp == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	sp->data = x;
	sp->next = NULL;
	
	return sp;
}

void insertAtail(list *s,int x)
{
	node *sp;
	
	sp=createnode(x);
	if(s->head==NULL)
	s->head=sp; 
	else
	s->tail->next=sp;
	s->tail=sp;
}

void traverse(list *s)
{
	node *p;
	
	p=s->head;
	
	while(p!=0)
	{
		printf("%d\n",p->data);
		p=p->next;
	}
}

int getnodes(list *s)
{
	node *p;
	
	int count=0;
	for(p=s->head;p!=NULL;p=p->next)
	{
		++count;
	}
	return count;
}
int main()
{
	list *s;
	
	s=(list*)malloc(sizeof(list));
	
	if(s == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	initialize(s);
	
	insertAtail(s,100);
	insertAtail(s,200);
	insertAtail(s,300);
	
	traverse(s);
	
	int count = getnodes(s);
	
	printf("NO. OF NODES : %d",count);
}
    

=========================================================================================================================================
Q.17 Create a Link list of 3 nodes containing 3 double values and print the average of 3 numbers.

#include<stdio.h>
#include<stdlib.h>

typedef struct nd             
{                           
    double data;
    struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

node* createNode(double no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void initalize(list *p)
{
	p->head = NULL;
	p->tail = NULL;
}
void insertAtail(list *p,double x)
{
	node *np;
	np = createNode(x);
	if(p->head==NULL)
	p->head = np;
	else
	p->tail->next = np;
	p->tail = np;
}

void traverse(list *p)
{
    node *sp;
    sp = p->head;
    
    while(sp!=NULL)
    {
    	printf("%lf\n",sp->data);
    	sp=sp->next;	
    	
    	printf("\n");
	}
	sp=p->head;
	float sum=0;
	while(sp!=NULL)
	{
		sum=(sum+sp->data);
		sp=sp->next;
	}
	printf("\nSUM = %f",sum);
	float avg=0;
	avg=sum/3;
	printf("\nAVERAGE = %f",avg);
}

int main()
{    
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
    	printf("MEMORY UNVAVAILABLE");
    	exit(0);
	}
	
	initalize(p);
	insertAtail(p,12.357);
	insertAtail(p,14.2345);
	insertAtail(p,17.234);
	
	traverse(p);
	
	free(p);
    
}
=================================================================================================================================
Q.18 Create a Link list of 5 nodes and print it in reverse order.

#include<stdio.h>
#include<stdlib.h>

typedef struct nd             
{                           
    char data;
    struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

node* createNode(char no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void initalize(list *p)
{
	p->head = NULL;
	p->tail = NULL;
}
void insertAtail(list *p,char x)
{
	node *np;
	np = createNode(x);
	if(p->head==NULL)
	p->head = np;
	else
	p->tail->next = np;
	p->tail = np;
}

void traverse(list *p)
{
    node *sp;
    int c=0;
    sp=p->head;
    printf("LIST IS :");
    while(sp!=NULL)
    {
    	printf("%d ",sp->data);
    	sp=sp->next;
    	c++;
	}
	
	int arr[c];
	sp=p->head;
	int i=c-1;
	while(sp!=NULL)
	{
		arr[i]=sp->data;
		sp=sp->next;
		i--;
	}
	
	printf("\nLINKED LIST IN REVERSE ORDER : ");
	for(i=0;i<c;i++)
	{
		printf("%d ",arr[i]);
	}
}
int main()
{    
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
    	printf("MEMORY UNVAVAILABLE");
    	exit(0);
	}
	
	initalize(p);
	insertAtail(p,'A');
	insertAtail(p,'B');
	insertAtail(p,'C');
	insertAtail(p,'D');
	insertAtail(p,'E');
	
	traverse(p);
	
	free(p);
    
}

=================================================================================================================================
Q.19 Create a Link list of 3 nodes and delete the head node.

#include<stdio.h>
#include<stdlib.h>
//MULTIPLE NODES
typedef struct st
{
	char data;
	struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

void initialize(list *s)
{
	s->head = NULL;
	s->tail = NULL;
}

node* createnode(char* x)
{
	node *sp;
	
	sp = (node*)malloc(sizeof(node));
	
	if(sp == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	sp->data = x;
	sp->next = NULL;
	
	return sp;
}

void insertAtail(list *s,char *x)
{
	node *sp;
	
	sp=createnode(x);
	if(s->head==NULL)
	s->head=sp; 
	else
	s->tail->next=sp;
	s->tail=sp;
}

void traverse(list *s)
{
	node *p;
	
	p=s->head->next;
	
	while(p!=0)
	{
		printf("%c\n",p->data);
		p=p->next;
	}
}

int main()
{
	list *s;
	
	s=(list*)malloc(sizeof(list));
	
	if(s == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	initialize(s);
	
	insertAtail(s,'C');
	insertAtail(s,'D');
	insertAtail(s,'G');
	
	
	traverse(s);
}
    
=================================================================================================================================
Q.20 Create a list of 3 city names and Enter a city to be searched in the list .If city name exists in list then Display City Found.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//MULTIPLE NODES
typedef struct st
{
	char data[3][10];
	struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

void initialize(list *s)
{
	s->head = NULL;
	s->tail = NULL;
}

node* createnode(char *x)
{
	node *sp;
	
	sp = (node*)malloc(sizeof(node));
	
	if(sp == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	strcpy(sp->data,x);
	sp->next = NULL;
	
	return sp;
}

void insertAtail(list *s,char* x)
{
	node *sp;
	
	sp=createnode(x);
	if(s->head==NULL)
	s->head=sp; 
	else
	s->tail->next=sp;
	s->tail=sp;
}

void traverse(list *s)
{
	node *p;
	
	p=s->head;
	
	while(p!=0)
	{
		printf("%s\n",p->data);
		p=p->next;
	}
}

node* search(list *s,char* a)
{
	node *p;
	
	p=s->head;
	
	while(p!=NULL)
	{
		if(strcmp(a,p->data)==0)
		return p;
		p=p->next;
	}
	return 0;
}
int main()
{
	list *s;
	
	s=(list*)malloc(sizeof(list));
	
	if(s == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	initialize(s);
	
	insertAtail(s,"PUNE");
	insertAtail(s,"PATNA");
	insertAtail(s,"BIHAR");
	
	traverse(s);
	
	char x[3][10];
	printf("CITY NAME TO BE SEARCHED : ");
	gets(x);
	
	node *temp;
	
	temp=search(s,x);
	
	if(temp == 0)
	printf("ELEMENT NOT FOUND");
	else
	printf("ELEMENT FOUND");	
}
=====================================================================================================================================================
Q.21 Create an array of 5 integer values and search an element in the array using Linear Search.

#include<stdio.h>

void main()
{
	int a[5]={10,12,53,65,67};
	
	int i,x,flag;
	
	printf("ENTER NO. TO BE MATCHED : ");
	scanf("%d",&x);
	
	for(i=0;i<5;i++)
	{
		if(a[i] == x)
		{
			flag = i+1;
			break;
		}
		else
		flag = 0;
    }
    if(flag != 0)
    {
    	printf("\nNO. %d MATCHES THE ARRAY %d\n",x,flag);
	}
	else
	{
	printf("\nNO. DOESNT MATCH THE ARRAY\n");
    }
}
==================================================================================================================================================
Q.22 Create an array of string and search a string in the array using Linear Search.

#include<stdio.h>
#include<string.h>

void main()
{
    char a[3][8]={"ABHISHEK","SALONI","NIMESH"};
	
	int i,flag;
	char x[8];
	
	printf("ENTER NO. TO BE MATCHED : ");
	scanf("%s",&x);
	
	for(i=0;i<3;i++)
	{
		if(strcmp(a[i],x) == 0)
		{
			flag = 1;
			break;
		}
    }
    if(flag != 0)
    	printf("\nCHAR %s\nMATCHES THE ARRAY MEMS %d\n",x,flag);
	else
	printf("\nCHAR DOESNT MATCH THE ARRAY MEMS\n");
}
==================================================================================================================================
Q.23 Sort an array of 5 numbers using Insertion sort

#include <stdio.h>

int main()
{
  int n, array[10], c, d, t, flag = 0;

  printf("Enter number of elements\n");
  scanf("%d", &n);

  printf("Enter %d integers\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  for (c = 0 ; c < n ; c++) 
  {
    t = array[c];

    for (d = c - 1 ; d >= 0; d--) 
	{
      if (array[d] > t) 
	  {
        array[d+1] = array[d];
        flag = 1;
      }
      else
      break;
    }
    if (flag!=0)
    array[d+1] = t;
  }

  printf("Sorted list in ascending order:\n");

  for (c = 0; c < n ; c++) 
  {
    printf("%d\n", array[c]);
  }

  return 0;
}
==============================================================================================================================
Q.24 Make a tree which contains 3 nodes. A is Root node, B is left child and C is right child.

#include<stdio.h>
#include<stdlib.h>

typedef struct nd
{
	char data;
	struct nd *left;
	struct nd *right;
}tree;

tree* createnode(char no)
{
    tree *np;
	
	np = (tree*)malloc(sizeof(tree));
	
	if(np == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	np->data = no;
	np->left = NULL;
	np->right = NULL;
	
	return np;
}

int main()
{
	tree *root,*n,*m;
	
	root = createnode('A');
	n = createnode('B');
	m = creatnode('C');

	root->left = n;
	root->right = m;
	
	printf("ROOT %c",root->left->data);
	printf("ROOT %c",root->right->data);
}  


=========================================================================================================================================================
Q.25 Create a tree of 3 nodes where root node displays the value as "Color" , Left node of root shows value as "Red" and right node shows value as Green. 
     and print all node values in using preorder traversal.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct nd
{
	char data[3][10];
	struct nd *left;
	struct nd *right;
}tree;

tree* createnode(char* no)
{
    tree *np;
	
	np = (tree*)malloc(sizeof(tree));
	
	if(np == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	strcpy(np->data,no);
	np->left = NULL;
	np->right = NULL;
	
	return np;
}

void preorderTraversal(tree* root)
{
	if(root == NULL)
	return;
	printf("%s->",root->data);
	preorderTraversal(root->left);
	preorderTraversal(root->right);
}

int main()
{
	tree *root,*n,*m;
	
	root = createnode("COLOUR");
	n = createnode("RED");
	m = createnode("GREEN");

	root->left = n;
	root->right = m;
	
	printf("ROOT NODE = %s\n",root->data);
	printf("LEFT NODE = %s\n",root->left->data);
	printf("RIGHT NODE = %s\n",root->right->data);

    printf("\n");
    
    preorderTraversal(root);

}
   
=====================================================================================================================================================
Q.26 Create a link list of 3 integers and print the elements of link list in reverse order using stack.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 3
typedef struct nd             
{                           
    char data;
    struct nd *next;
}node;

typedef struct st
{
    int top;
    int elements[3];    
}stack;

void initialize(stack *sp)
{
    sp->top=-1;
}

node* createNode(int no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void push(stack *sp,int a)
{
        if(sp->top == SIZE-1)    
            printf("\nStack overflow\n");
        else
            sp->elements[++sp->top]=a;
}

void display(stack *sp)
{
    int i;
    printf("REVERSE ORDER :\n");
    for(i=sp->top;i!=-1;i--)
    {
        printf("%d ",sp->elements[i]);    
    }    
}

int main()
{    
    node *p,*head,*tail,*ptr;    
    
    stack s1;
    
    initialize(&s1);
    
    head=createNode(10);  
    tail=head;
    p=createNode(20);    
    
    tail->next=p;  
    tail=tail->next;
   
    p=createNode(30);    
    
    tail->next=p;       
    tail=tail->next;
    
    ptr=head;
    printf("LIST ORDER :\n");
    while(ptr!=NULL)
    {
        printf("%d ",ptr->data);
        int a=ptr->data;
        push(&s1,a);
        ptr=ptr->next;
    }
    printf("\n");
    
    display(&s1);
}
=====================================================================================================================================================

Q.27 Write a program to crate an adjacency matrix(3 by 3) using graph , where create edges (0,1),(1,2),(1,1), Store the student age information

#include<stdio.h>

int main()
{
    int ad[3][3];

    int i,j,age;
    
    for(i=0;i<3;i++) 
	{
	   	for(j=0;j<3;j++)
	    {
           if(i==0 && j==1)
        {
      	printf("ENTER AGE : ");
       	scanf("%d",&age);
    	ad[i][j]=age;
	    }
	       else if(i==1 && j==1)
     	{
		printf("ENETR AGE : ");
		scanf("%d",&age);
		ad[i][j]=age;
    	}
	       else if(i==1 && j==2)
    	{
 		printf("ENETR AGE : ");
		scanf("%d",&age);
		ad[i][j]=age;
    	}
           else
    	{
    		ad[i][j]=0;
    	}
    } 
}
	for(i=0;i<3;i++) 
	{
	   	for(j=0;j<3;j++)
	   	{
	   	    printf("%d\t",ad[i][j]);	
	    }
	    printf("\n");
	}	
}
===========================================================
Q.28 Create a Binary Search Tree with 10 nodes where node value is character and Traverse the tree in postorder.

#include<stdio.h>
#include<stdlib.h>
typedef struct st
{
	int key;
	struct st *left;
	struct st *right;
}node;

node *newnode(int data)
{
	node *t;
	t=(node*)malloc(sizeof(node));
	t->key = data;
	t->left = NULL;
	t->right = NULL;
	
	return t;
}

node* insert(node *nd,int data)
{
	if(nd == NULL)
	return newnode(data);
	
	if(data < nd->key)               //data compared to key of root
	nd->left = insert(nd->left,data);
	
	else if(data > nd->key)           //data compared to key of root
	nd->right = insert(nd->right,data);
	
	return nd;
}

void inorder(node* root)
{
	if(root == NULL)
	return ;
	inorder(root->left);
	printf("%d\t",root->key);
	inorder(root->right);
}

int main()
{
	node *root = NULL;
	root = insert(root,50);
	insert(root,20);
	insert(root,34);
	insert(root,43);
	insert(root,21);
	insert(root,67);
	
	inorder(root);
}

===========================================================
Q.29 Create an unsorted array of 5 elements and sort the array in descending order using bubble sort and search an element in array using Binary Search.

#include <stdio.h>

int binarySearch(int a[], int beg, int end, int item)   
{                                                      
    int mid;  
    if(end >= beg)   
    {     
        mid = (beg + end)/2;  
        if(a[mid] == item)    
        {  
            return mid+1;     
        }  
        else if(a[mid] > item)   
        {  
            return binarySearch(a,mid+1,end,item);  
        }  
        else   
        {  
            return binarySearch(a,beg,mid-1,item);  
        }  
      
   }  
    return -1;   
}  

int main()
{
    int  i, j, temp;
    int first, last, middle,search,arr[10],location=-1;
    
    printf("INTEGERS : \n",10);


  for (i=0;i<10;i++)
    scanf("%d", &arr[i]);
      for (i=0;i<10;i++)
    {
        printf("%d ", arr[i]);
    }
    
  for (i=0;i<10;i++)
  {
    for (j=i-1 ;j<10;j++)
    {
      if (arr[j] < arr[i]) 
      {
        temp=arr[j];
        arr[j]=arr[i];
        arr[i]=temp;
      }
    }
  }
    printf("\nDESCENDING ORDER:\n");
    for (i=0;i<10;i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n\n");

    printf("Enter value to find\n");
    scanf("%d", &search);
    
    location = binarySearch(arr, 0, 9, search); 
     
       if(location != -1)   
    {  
        printf("ITEM FOUND %d",location);  
    }  
    else  
    {  
        printf("ITEM NOT FOUND");  
    } 
}
