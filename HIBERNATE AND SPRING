1.Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default.   Create a table maually.
=>

//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>

//student.java

package pack;

public class Student {
	public int sno;
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public int studentRollno,age;
	public String name;
	
	public int getStudentRollno() {
		return studentRollno;
	}
	public void setStudentRollno(int studentRollno) {
		this.studentRollno = studentRollno;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
}
//student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="pack.Student" table="student392">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="studentRollno" type="int">
            <column name="STUDENTROLLNO" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
    </class>
</hibernate-mapping>

//st1.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class St1 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ROLLNO : ");
		int ro = sc.nextInt();
				
		sc.nextLine();

		System.out.println("ENTER THE NAME : ");
		String nm = sc.nextLine();
				
		System.out.println("ENTER THE AGE : ");
		int ag = sc.nextInt();
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Student st = new Student();
		
		st.setStudentRollno(ro);
	    
		st.setName(nm);
		
		st.setAge(ag);
		
		s.save(st);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
	    System.out.println("RECORD SUCCESSFULLY INSERTED");
	}

}

//////////////////////////////////////////////////////////////////////////////////////////////
 2.] Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default.    Table should be created by hibernate and the records in the table should be updated.

=>

//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>

//student2.java

package pack;

public class Student2 {
	public int sno;
	public int studentRollno,age;
	public String name;
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public int getStudentRollno() {
		return studentRollno;
	}
	public void setStudentRollno(int studentRollno) {
		this.studentRollno = studentRollno;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
}

//student2.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="pack.Student2" table="STUDENT2">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="assigned" />
        </id>
        <property name="studentRollno" type="int">
            <column name="STUDENTROLLNO" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
    </class>
</hibernate-mapping>


//st2.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class St2 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ROLLNO : ");
		int ro = sc.nextInt();
		
		System.out.println("ENTER THE NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER THE AGE : ");
		int ag = sc.nextInt();
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Student2 st2 = new Student2();
		
		st2.setStudentRollno(ro);
		
		st2.setName(nm);
		
		st2.setAge(ag);
		
		s.save(st2);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
		System.out.println("RECORD INSERTED SUCCESSFULLY......");
		}
	}
//////////////////////////////////////////////////////////////////////////////////////////////
3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.

=>

//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>


//Amount.java

package pack;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "amount")
public class Amount {

	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
    public int sno;
    public int accno;
    
    public String name,acctype;
    
    public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int getAccno() {
		return accno;
	}

	public void setAccno(int accno) {
		this.accno = accno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAcctype() {
		return acctype;
	}

	public void setAcctype(String acctype) {
		this.acctype = acctype;
	}

	
}
//A1.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class A1 {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ACCOUNT NUMBER : ");
		int ro = sc.nextInt();
				
		sc.nextLine();
		
		System.out.println("ENTER THE ACCOUNT NAME : ");
		String nm = sc.nextLine();
						
		System.out.println("ENTER THE ACCOUNT TYPE : ");
		String ag = sc.nextLine();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(Amount.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Amount am = new Amount();
		
		am.setAccno(ro);
		
		am.setName(nm);
		
		am.setAcctype(ag);
		
		s.save(am);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
	    System.out.println("RECORD SUCCESSFULLY INSERTED");
	}

}

//////////////////////////////////////////////////////////////////////////////////////////////

4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".


=>

//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property> 
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="prod1.hbm.xml"/>
         <mapping resource="POJO.hbm.xml" />
    </session-factory>
</hibernate-configuration>

//POJO.java

package ASSIGNMENTS;

public class POJO {

	public int sno;
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public String usnm,pswd;

	public String getUsnm() {
		return usnm;
	}

	public void setUsnm(String usnm) {
		this.usnm = usnm;
	}

	public String getPswd() {
		return pswd;
	}

	public void setPswd(String pswd) {
		this.pswd = pswd;
	}
	
	
}
//POJO.hm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="ASSIGNMENTS.POJO" table="POJO">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="usnm" type="java.lang.String">
            <column name="USNM" />
        </property>
        <property name="pswd" type="java.lang.String">
            <column name="PSWD" />
        </property>
    </class>
</hibernate-mapping>

//A.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv1">
USERNAME <input type="text" name="us">
PASSWORD <input type="password" name="pass">
<input type="submit" value="ENTER">
</form>
</body>
</html>

//SERVLET - 1

package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	PrintWriter out = response.getWriter();
	
	String us = request.getParameter("us");
	
	String pa = request.getParameter("pass");
	SessionFactory sf = new Configuration().configure().buildSessionFactory();
	
	Session s = sf.openSession();
	
	s.beginTransaction();
	
	POJO p = new POJO();
	p.setSno(101);

	p.setUsnm(us);
	
	p.setPswd(pa);
	
	s.save(p);
	
	s.getTransaction().commit();
	
	s.close();
	
	sf.close();
	
	out.print("TABLE CREATED AND RECORD SUCCESSFULLY INSERTED...................");
	
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

//B.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv2">
ID <input type="text" name="id">
PASSWORD<input type="password" name="pass">
<input type="submit" value="SUBMIT">
</form>
</body>
</html>

//SERVLET - 2

package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv2 extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		int sno = Integer.parseInt(request.getParameter("id"));		
		
		String pa = request.getParameter("pass");
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		POJO p = s.get(POJO.class, sno);

		p.setPswd(pa);
		
		s.update(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("PASSWORD UPDATED");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

//////////////////////////////////////////////////////////////////////////////////////////////
5. Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record. 


=>

//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Employee.hbm.xml" />
    </session-factory>
</hibernate-configuration>

//Employee.java

package Assignments;

public class Employee {
	public int EmpID,salary;
	public String ename;
	public int getEmpID() {
		return EmpID;
	}
	public void setEmpID(int empID) {
		EmpID = empID;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	public String getEname() {
		return ename;
	}
	public void setEname(String ename) {
		this.ename = ename;
	}
        		
	}

//Employee.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="Assignments.Employee" table="EMPLOYEE">
        <id name="EmpID" type="int">
            <column name="EMPID" />
            <generator class="increment" />
        </id>
        <property name="salary" type="int">
            <column name="SALARY" />
        </property>
        <property name="ename" type="java.lang.String">
            <column name="ENAME" />
        </property>
    </class>
</hibernate-mapping>

//emp_main.java

package Assignments;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class emp_main {

	public static void main(String[] args) {

	SessionFactory sf = new Configuration().configure().buildSessionFactory();
	
	Session s = sf.openSession();
	
	s.beginTransaction();
	
	Scanner sc =  new Scanner(System.in);
	/*
	System.out.println("ENTER NAME1 : ");
	String nm1 = sc.nextLine();
	System.out.println("ENTER SALARY1 : ");
	int sal1 =sc.nextInt();
	
	sc.nextLine();
	
	System.out.println("ENTER NAME2 : ");
	String nm2 = sc.nextLine();
	System.out.println("ENTER SALARY2 : ");
	int sal2 =sc.nextInt();
	
	sc.nextLine();
	
	System.out.println("ENTER NAME3 : ");
	String nm3 = sc.nextLine();
	System.out.println("ENTER SALARY3 : ");
	int sal3 =sc.nextInt();
	
	Employee e1 = new Employee();
	
	e1.setEname(nm1);
	e1.setSalary(sal1);
	
Employee e2 = new Employee();
	
	e2.setEname(nm2);
	e2.setSalary(sal2);
	
Employee e3 = new Employee();
	
	e3.setEname(nm3);
	e3.setSalary(sal3);
	
	s.save(e1);
	s.save(e2);
	s.save(e3);
	
	s.getTransaction().commit();
	
	s.close();
	
	System.out.println("RECORD SUCCESSFULLY INSERTED....");
	*/
	/*
	s = sf.openSession();
	
	s.beginTransaction();
	
	System.out.println("ENTER ID TO BE DELETE : ");
	
	int del = sc.nextInt();
	
	sc.nextLine();
	
	Employee e4 = new Employee();
	
	e4.setEmpID(del);
	
	s.delete(e4);
		
	s.getTransaction().commit();
	
	s.close();
	
	System.out.println("RECORD DELETED....");
*/
	s = sf.openSession();
	
	s.beginTransaction();
	
    System.out.println("ENTER ID TO UPDATE : ");
	
	int upd = sc.nextInt();
	
	sc.nextLine();

	Employee e5 = s.get(Employee.class, upd);
	
	e5.setEname("ABHILASH");
	
	e5.setSalary(30000);
		
	s.update(e5);
	
	s.getTransaction().commit();
	
	s.close();
	
	sf.close();

	System.out.println("RECORD UPDATED..............");
	}

}
//////////////////////////////////////////////////////////////////////////////////////////////
6.Create a Maven project in hibernate to perform CRUD Operations. Create a web Application.
=>
///CREATE
-----------------------------------------------
============================
//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto" >create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql" >true</property>
    </session-factory>
</hibernate-configuration>


//SPORT

package ASS_6;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "sport_tab")
public class sports {

	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
	public int sno;
	
	public int sport_no;
	public String sport_nm;
	
	public int getSport_no() {
		return sport_no;
	}
	public void setSport_no(int sport_no) {
		this.sport_no = sport_no;
	}
	public String getSport_nm() {
		return sport_nm;
	}
	public void setSport_nm(String sport_nm) {
		this.sport_nm = sport_nm;
	}
	
	
}

//ASS_cr.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="CREATE">
SPORT NO <input type="number" name="numb">
SPORT NAME <input type="text" name="name">
<input type="submit" value="ENTER" >
</form>
</body>
</html>

//CREATE

package ASS_6;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class CREATE extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int num = Integer.parseInt(request.getParameter("numb"));
		
		String nm = request.getParameter("name");
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(sports.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		sports sp = new sports();
		
		sp.setSport_no(num);
		sp.setSport_nm(nm);
		
		s.save(sp);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("INSERTED SUCCESFULLY");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

///READ
============================
-----------------------------------------------
//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto" >update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql" >true</property>
    </session-factory>
</hibernate-configuration>

//ASS_re.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="READ" >
SNO RECORDS <input type="text"  name="sno"> 
<input type="submit" value="ENTER">
</form>
</body>
</html>

//READ

package ASS_6;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class READ extends HttpServlet {
	private static final long serialVersionUID = 1L;
     
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	    int sno = Integer.parseInt(request.getParameter("sno"));
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(sports.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		sports sp = s.get(sports.class, sno);
		
		out.print("SPORT NUMBER : "+sp.getSport_no()+"   "+"SPORT NAME : "+sp.getSport_nm());
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("DISPLAYED SUCCESFULLY");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

-----------------------------------------------------------------------------------------------
///UPDATE

-------------------------------------------------------------------------------
===============================================
//ASS_up

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="UPDATE">
SNO RECORD <input type="text" name="upd">
<INPUT TYPE="SUBMIT" VALUE="ENTER">
</form>
</body>
</html>

//UPDATE 

package ASS_6;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class UPDATE extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		    int sno = Integer.parseInt(request.getParameter("upd"));
			
			PrintWriter out = response.getWriter();
			
			SessionFactory sf = new Configuration().configure().addAnnotatedClass(sports.class).buildSessionFactory();
			
			Session s = sf.openSession();
			
			s.beginTransaction();
			
			sports sp = s.get(sports.class, sno);
			
			sp.setSport_nm("SOCCER");
			
			s.update(sp);
			
			s.getTransaction().commit();
			
			s.close();
			
			sf.close();
			
			out.print("UPDATED SUCCESFULLY");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

///DELETE
============================
-----------------------------------------------

//ASS_del.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="DELETE">
ID RECORD <input type="text" name="del">
<input type="submit" value="ENTER">
</form>
</body>
</html>

//DELETE

package ASS_6;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class DELETE extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int sno = Integer.parseInt(request.getParameter("del"));
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(sports.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		sports sp = new sports();
		
	    sp.setSno(sno);
		
		s.delete(sp);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("DELETED SUCCESFULLY");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}


=========================================================
7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.

=>

//appcontext_ass.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="r" class="ASS.int_rate"/>
    
    <bean id="sbi" class="ASS.SBI" >
    <constructor-arg ref="r"></constructor-arg>
    </bean>
    
    <bean id="ic" class="ASS.ICICI" >
    <constructor-arg ref="r"></constructor-arg>
    </bean>
    
    <bean id="idb" class="ASS.IDBI" >
    <constructor-arg ref="r"></constructor-arg>
    </bean>
    
</beans>

//BANK.java

package ASS;

public interface BANK {

	public double getirate();
}
//ICICI.java

package ASS;

public class ICICI implements BANK{

	rate r1;
	
	public ICICI(rate x)
	{
		this.r1 = x;
	}
	@Override
	public double getirate() {
		
		return r1.getrate1();
	}

}

//IDBI.java

package ASS;

public class IDBI implements BANK{

	rate r2;
	
	public IDBI(rate x)
	{
		this.r2 = x;
	}
	@Override
	public double getirate() {
		
		return r2.getrate2();
	}

}

//SBI.java

package ASS;

public class SBI implements BANK {

	rate r3;
	
	public SBI(rate x)
	{
		this.r3 = x;
	}
	@Override
	public double getirate() {
		return r3.getrate3();
	}

	
}

//rate.java  ====>INTERFACE

package ASS;

public interface rate {

	public double getrate1();
	
	public double getrate2();
	
	public double getrate3();
}

//int_rate.java   ====>CLASS

package ASS;

public class int_rate implements rate{

	@Override
	public double getrate1() {
	
    return 9.5;
	}

	@Override
	public double getrate2() {
		
		return 7.2;
	}

	@Override
	public double getrate3() {
		return 10;
	}
	
	

}
//tes_main .java

package ASS;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
		
	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ass.xml");
	
	BANK b1 = ac.getBean("sbi",BANK.class);
	
	System.out.println(b1.getirate());
	
    BANK b2 = ac.getBean("ic",BANK.class);
	
	System.out.println(b2.getirate());
	
    BANK b3 = ac.getBean("idb",BANK.class);
	
	System.out.println(b3.getirate());

	}

}


/////////////////////////////////////////////////////////////////////////////////////
8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products

=>

//appcontext_ASS8.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="st" class="ASS_80.student2" />
    
    <bean id="pr" class="ASS_80.product2" />
    
    <bean id="s" class="ASS_80.student" >
    <property name="i1" ref="st" />
    </bean>
    
    <bean id="p" class="ASS_80.product">
    <property name="i2" ref="pr" />
    </bean>

</beans>

//student.java

package ASS_80;

public class student {

	public int rollno;
	public String name;
    public double percent;
    
    INTER i1;
    
	public INTER getI1() {
		return i1;
	}
	public void setI1(INTER i1) {
		this.i1 = i1;
	}
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public double getPercent() {
		return percent;
	}
	public void setPercent(double percent) {
		this.percent = percent;
	}
    
	public String saverecs1()
	{
		return i1.addrec();
	}
}

//product.java

package ASS_80;

public class product {

	public int pid;
	public String pro_nm;
	public int price;
	
	INTER i2;
	
	public INTER getI2() {
		return i2;
	}
	public void setI2(INTER i2) {
		this.i2 = i2;
	}
	
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getPro_nm() {
		return pro_nm;
	}
	public void setPro_nm(String pro_nm) {
		this.pro_nm = pro_nm;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	
	public String saverecs2()
	{
		return i2.addrec();
	}
}

//INTER

package ASS_80;

public interface INTER {

	public String addrec();
}


//student2.java 

package ASS_80;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class student2 implements INTER{

	@Override
	public String addrec() {
		
		Scanner sc = new Scanner(System.in);
		
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","root");
		
		PreparedStatement pmt = cn.prepareStatement("insert into student482 values(?,?,?)");
		
		System.out.println("ENTER ROLLNO OF THE STUDENT : ");
		int roll = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,roll );
		
		System.out.println("ENTER NAME OF THE STUDENT : ");
		String name= sc.nextLine();
		
		pmt.setString(2,name );
		
		System.out.println("ENTER PERCENTAGE OF THE STUDENT : ");
		double per = sc.nextDouble();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "SUCCESSFULLY INSERTED";
	}

}

//product2.java

package ASS_80;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class product2 implements INTER{

	@Override
	public String addrec() {		
		Scanner sc = new Scanner(System.in);
		
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","root");
		
		PreparedStatement pmt = cn.prepareStatement("insert into product482 values(?,?,?)");
		
		System.out.println("ENTER ID OF THE PRODUCT : ");
		int pid = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,pid );
		
		System.out.println("ENTER PRODUCT NAME : ");
		String nm= sc.nextLine();
		
		pmt.setString(2,nm );
		
		System.out.println("ENTER PRODUCT PRICE : ");
		int per = sc.nextInt();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "SUCCESSFULLY INSERTED";
	}

}

//test

package ASS_80;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
    ClassPathXmlApplicationContext con = new ClassPathXmlApplicationContext("appcontext_ASS8.xml");
    
    student s1 = con.getBean("s",student.class);
    
    System.out.println(s1.saverecs1());
    
    product p1 = con.getBean("p",product.class);
    
    System.out.println(p1.saverecs2());

	}

}

=========================================================
9.Write a spring configuration file which injects the username, email and password to the Bean class User.
=>

//appcontext_ass9.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="d" class="ASS_9.details" />
    
    <bean id="u" class="ASS_9.user" >
    <constructor-arg ref="d"></constructor-arg>
    </bean>
    
</beans>

//user.java

package ASS_9;

public class user {

	inter i1;
	
	public String us,em,pa;
	
	public user(inter i)
	{
		this.i1 = i;
		this.us = i.getus();
		this.em = i.getem();
		this.pa = i.getpa();
	}

	public inter getI1() {
		return i1;
	}

	public void setI1(inter i1) {
		this.i1 = i1;
	}

	public String getUs() {
		return us;
	}

	public void setUs(String us) {
		this.us = us;
	}

	public String getEm() {
		return em;
	}

	public void setEm(String em) {
		this.em = em;
	}

	public String getPa() {
		return pa;
	}

	public void setPa(String pa) {
		this.pa = pa;
	}
	
	public String st()
	{
		return i1.status();
	}
}

//inter.java  ==> interface

package ASS_9;

public interface inter {

	public String getus();
	
	public String getem();
	
	public String getpa();
	
	public String status();
}

//details.java

package ASS_9;

public class details implements inter{

	@Override
	public String getus() {
		return "ABHISHEK123";
	}

	@Override
	public String getem() {
		return "abhi123@gmail.com";
	}

	@Override
	public String getpa() {
		return "abhishek234";
	}

	public String status()
	{
		return "SUCCESFULLY DISPLAYED";
	}
}


//test.java

package ASS_9;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
	ClassPathXmlApplicationContext cs = new ClassPathXmlApplicationContext("appcontext_ASS9.xml");
	
	user u1 = cs.getBean("u",user.class);
	
	System.out.println(u1.getUs());
	
	System.out.println(u1.getEm());
	
	System.out.println(u1.getPa());
	
	System.out.println(u1.st());
	
	cs.close();

	}

}

/////////////////////////////////////////////////////////////////////////////////////
10.Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.

=>

//appcontext_ASS10.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="class" class="ASS_10.CLASS1"  />
    
    <bean id="bean1" class="ASS_10.BEAN1" >
    <property name="in1" ref="class" />
    </bean>
    
    <bean id="bean2" class ="ASS_10.BEAN2" >
    <property name="in2" ref="class" />
    </bean>
    
</beans>

//BEAN1

package ASS_10;

public class BEAN1 {

	INTER in1;

	public INTER getIn1() {
		return in1;
	}

	public void setIn1(INTER in1) {
		this.in1 = in1;
	}
	
	public void getm()
	{
		in1.getmsg();
	}
	
}

//BEAN2

package ASS_10;

public class BEAN2 {

	INTER in2;

	public INTER getIn2() {
		return in2;
	}

	public void setIn2(INTER in2) {
		this.in2 = in2;
	}
	
	public void getm()
	{
		in2.getmsg();
	}
	
}

//INTERFACE

package ASS_10;

public interface INTER {

	public void getmsg();
}

//CLASS1

package ASS_10;

public class CLASS1 implements INTER{

	@Override
	public void getmsg() {
		System.out.println("MESSAGE CREATED");
	}

	
}
//test

package ASS_10;

import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;

public class test {

	public static void main(String[] args) {
	XmlBeanFactory bf = new XmlBeanFactory(new ClassPathResource("appcontext_ASS10.xml"));
	
	BEAN1 b1 = bf.getBean("bean1",BEAN1.class);
	
	b1.getm();
	
	BEAN2 b2 = bf.getBean("bean2",BEAN2.class);
	
	b2.getm();
	
	System.out.println(b1);
	
	System.out.println(b2);

	}

}

/////////////////////////////////////////////////////////////////////////////////////
11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.

=>

//appcontext_ASS11.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="i2" class="ASS_11.FULLNM" >
    </bean>
    
    <bean id="i1" class="ASS_11.PERSON" >
    <property name="fn"  ref="i2"></property>
    </bean>
    

    
</beans>

//FULLNM.java

package ASS_11;

import java.util.Scanner;

public class FULLNM {

	public String fnm,lnm;

	Scanner sc;
	
	public String getFnm() {
		return fnm;
	}

	public void setFnm() {
		sc = new Scanner(System.in);
		System.out.println("ENTER FIRST NAME : ");
		String fm = sc.nextLine();
		this.fnm = fm;
	}

	public String getLnm() {
		return lnm;
	}

	public void setLnm() {
		sc = new Scanner(System.in);
		System.out.println("ENTER LAST NAME : ");
		String lm = sc.nextLine();
		this.lnm = lm;
	}
	
}

//PERSON.java

package ASS_11;

public class PERSON {

	public int age;

	public void setAge(int age) {
		this.age = age;
	}

	public int getAge() {
		return age;
	}
	
	FULLNM fn;
	
	public void setFn(FULLNM fn) {
		this.fn = fn;
	}

	public FULLNM getFn() {
		return fn;
	}
	
	public void setnames()
	{
		fn.setFnm();
		fn.setLnm();
	}
	
	public String getfname()
	{
		return fn.getFnm();
	}
	
	public String getlname()
	{
		return fn.getLnm();
	}
	
}

//TEST.java

package ASS_11;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {

	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS11.xml");
	
	PERSON p = ac.getBean("i1",PERSON.class);
	
	p.setAge(18);
	
	System.out.println(p.getAge());
	
	p.setnames();
	
	System.out.println("PERSON NAME : "+p.getfname()+" "+p.getlname());
	}
}


/////////////////////////////////////////////////////////////////////////////////////

12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.

=>

//appcontext_ASS12.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="ASS_12"></context:component-scan>
</beans>

//INTERFACE - 1

package ASS_12;

public interface IN {

	public String getmesg();
}

//FIRST

package ASS_12;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("first")
public class FIRST implements IN{

	INTER i1;
	
	@Autowired
	public FIRST(INTER i)
	{
		this.i1 = i;
	}
	
	public String getmesg()
	{
		return i1.getmsg();
	}
}

//INTERFACE

package ASS_12;

public interface INTER {

	public String getmsg();
}


//msg

package ASS_12;

import org.springframework.stereotype.Component;

@Component
public class msg implements INTER{

	public String getmsg() {
		return "MESSAGE GENERATED FROM THE METHOD";
	}

}

//TEST

package ASS_12;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS12.xml");
	
	IN fr = ac.getBean("first",IN.class);
	
	System.out.println(fr.getmesg());

	IN2 sc = ac.getBean("second",IN2.class);
	
	sc.displayfibonacci();
	}
}


///SECOND

package ASS_12;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("second")
public class SECOND implements IN2{

   INTER2 i2;
   
   @Autowired
   public SECOND(INTER2 i)
   {
	  this.i2 = i;
   }

public INTER2 getI2() {
	return i2;
}

public void setI2(INTER2 i2) {
	this.i2 = i2;
}
   
public void displayfibonacci()
{
	i2.getfibo();
}
}
//INTER2

package ASS_12;

public interface INTER2 {

	public void getfibo();
}

//fibo

package ASS_12;

import org.springframework.stereotype.Component;

@Component
public class fibo implements INTER2{

	public void getfibo() {
		
		int max = 10, prev= 0, next = 1;
        System.out.print("Fibonacci Series of "+max+" numbers:");

        int i=1;
        while(i <= max)
        {
            System.out.print(prev+" ");
            int sum = prev + next;
            prev = next;
            next = sum;
            i++;
        }
    }

	}



=========================================================
13. Create an interface as Person. Make two classes Student and Manager which are implementing the Person interface.In person interface there are two methods as
    getDetails() and showDetails(). Create a Bean class where Dependency injection should be applied on the field. Make a TestMain class where retrieve the details of 
Student and manager.

=>

//appcontext_ASS13.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="ASS_13"></context:component-scan>
</beans>

//testmain.java

package ASS_13;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class testmain {

	public static void main(String[] args) {
	
	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS13.xml");
	
	BEAN b1 = ac.getBean("bean",BEAN.class);
	
	BEAN b2 = ac.getBean("bean",BEAN.class);
	
	b1.getpnm();
	
	b2.getmnm();
	}

}


//BEAN

package ASS_13;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component("bean")
public class BEAN {

	@Autowired
	@Qualifier("student")
	PERSON p1;
	
	public void getpnm()
	{
		p1.getdetails();
		p1.showdetails();
	}
	
	@Autowired
	@Qualifier("manager")
	PERSON p2;
	
	public void getmnm()
	{
		p2.getdetails();
		p2.showdetails();
	}
	
}

//PERSON

package ASS_13;

public interface PERSON {

	public void getdetails();
	
	public void showdetails();
}

//student.java

package ASS_13;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class student implements PERSON{
	public String nm;
	public int percent;
	
	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}

	public int getPercent() {
		return percent;
	}

	public void setPercent(int percent) {
		this.percent = percent;
	}

	@Override
	public void getdetails() {
	Scanner sc = new  Scanner(System.in);
	
	System.out.println("ENTER STUDENT NAME : ");
	String nam = sc.nextLine();
	
	System.out.println("ENTER  PERCENTAGE : ");
	int per = sc.nextInt();
	
	setNm(nam);
	setPercent(per);
	
	}

	@Override
	public void showdetails() {
	System.out.println(getNm()+" ");
    System.out.println(getPercent());
	}

}

//manager.java

package ASS_13;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class manager implements PERSON{

	public String nm;
	public int id;
	
	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Override
	public void getdetails() {
	Scanner sc = new  Scanner(System.in);
	
	System.out.println("ENTER MANAGER NAME : ");
	String nam = sc.nextLine();
	
	System.out.println("ENTER MANAGER ID : ");
	int i = sc.nextInt();
	
	setNm(nam);
	setId(i);
	
	}

	@Override
	public void showdetails() {
	System.out.println(getNm());
    System.out.println(getId());
	}

}
=========================================================
14. Make a Spring MVC Project in Maven, Create a registration page where customer Id, firstname, lastname and age is to be taken in the registration form and save data 
in the database .After submitting data , display the message "Registration Successful".

=>

//maincontroller.java

package org.pack1;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class MainControl {

	@RequestMapping("/control1")
	public String form1()
	{
		return "form1";
	}
	
	@RequestMapping("/ass_14")
	public String status(@RequestParam("cid") int id,@RequestParam("fnm") String fm,@RequestParam("lnm") String lm,@RequestParam("ag") int age)
	{
		try {
			Class.forName("oracle.jbdc.driver.OracleDriver");
			
			Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe");
			
			Statement smt = cn.createStatement();
			
			String query = "insert into assign14 values("+id+",'"+fm+"','"+lm+"',"+age+")";
			
			smt.executeUpdate(query);
			
			smt.close();
			
			cn.close();
			
			System.out.println("DONE !!!");
			
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
			System.out.println("INVALID FORMAT");
		}
		
		return "status";
	}
}

//form1.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="ass_14">
<table border=3>
<center><caption>REGISTRATION FORM</caption></center>
<tr><td>CUSTOMER ID</td><td><input type="number" name="cid" required></td></tr>
<tr><td>CUSTOMER FIRSTNAME </td><td><input type="text" name="fnm"></td></tr>
<tr><td>CUSTOMER LASTNAME </td><td><input type="text" name="lnm"></td></tr>
<tr><td>AGE</td><td><input type="number" name="ag"></td></tr>
<tr><td><input type="submit" value="ENTER"></td></tr>
</table>
</form>
</body>
</html>

//status

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<h2>LOGIN SUCCESSFUL</h2>
</body>
</html>
============================================================
15  Make a program to apply constructor injection using XML and Annotation.
=>

///XML - BASED 
//testmain.java

package ASS_15;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test_main {

	public static void main(String[] args) {
	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS15.xml");
	
	BEAN1 bn1 = ac.getBean("b1",BEAN1.class);
	
	System.out.println(bn1.getmsg());
	
	ac = new ClassPathXmlApplicationContext("appcontext_ASS15_.xml");
	
	BEAN3 bn3 = ac.getBean("bean3",BEAN3.class);
	
	bn3.callmsg();
	}

}

//BEAN1

package ASS_15;

public class BEAN1 {

	INTER i2;

	public BEAN1(INTER in)
	{
		this.i2 = in;
	}
	
	public INTER getI2() {
		return i2;
	}

	public void setI2(INTER i2) {
		this.i2 = i2;
	}
	
	public String getmsg()
	{
		return i2.msg();
	}
}
//INTER

package ASS_15;

public interface INTER {

	public String msg();
}

//BEAN2.java

package ASS_15;

public class BEAN2 implements INTER{

	@Override
	public String msg() {
		return "MESSAGE GENERATED FROM BEAN CLASS";
	}	
}
//apcontext_ASS15_a.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    <bean id="b2" class="ASS_15.BEAN2"></bean>
    
    <bean id="b1" class="ASS_15.BEAN1">
    <constructor-arg ref="b2"></constructor-arg>
    </bean>
    
   <!--   <context:component-scan base-package="ASS_15"></context:component-scan> -->
    </beans>

///ANNOTATED - BASED

//BEAN3

package ASS_15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("bean3")
public class BEAN3 {

	INTER2 i2;
	
	@Autowired
	public BEAN3(INTER2 in2)
	{
		this.i2 = in2;
	}
	
	public void callmsg()
	{
		i2.newmsg();
	}
}


//INTER2

package ASS_15;

public interface INTER2 {

	public void newmsg();
}

//BEAN4

package ASS_15;

import org.springframework.stereotype.Component;

@Component
public class BEAN4 implements INTER2{

	@Override
	public void newmsg() {
	
	System.out.println("A NEW TYPE OF MESSAGE IS BEEN GENERATED !!!");
		
	}

}

=========================================================
16  Make a program to apply Setter injection using XML and Annotation.

=>

//test

package ASS_16;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS16.xml");
		
		BEAN5 bn5 = ac.getBean("b5",BEAN5.class);
		
		double rad = bn5.getpm1();
		
		System.out.println("AREA OF THE CIRCLE : "+(bn5.pm3*rad*rad));
		
		ac = new ClassPathXmlApplicationContext("appcontext_ASS16_.xml");
		 
		BEAN7 bn7 = ac.getBean("bean7",BEAN7.class);
		
		System.out.println("FULLNM : "+bn7.nm1()+" "+bn7.nm2());  
    }
}


///ANNOTATED - BASED
//BEAN5

package ASS_16;

public class BEAN5 {

	INTER i1;

	public INTER getI1() {
		return i1;
	}

	public void setI1(INTER i1) {
		this.i1 = i1;
	}
	
	public double getpm1()
	{
		return i1.getpara1();
	}
	
	public double pm3 = INTER.pi;
}


//INTER

package ASS_16;

public interface INTER {

	public Double pi = 3.14;
	
	public int getpara1();

}

//BEAN6

package ASS_16;

import java.util.Scanner;

public class BEAN6 implements INTER{

	Scanner sc;
	@Override
	public int getpara1() {
		sc = new Scanner(System.in);
		
		System.out.println("ENTER PARAMETER 1 : ");
		int p1 = sc.nextInt();
		
		return p1;
	}
	
}

//appcontext_ASS16.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="b6" class="ASS_16.BEAN6"></bean>
    
    <bean id="b5" class="ASS_16.BEAN5">
    <property name="i1" ref="b6"></property>
    </bean>
    
</beans>

//BEAN7

package ASS_16;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("bean7")
public class BEAN7 {

	INTER2 i2;

	
	public INTER2 getI2() {
		return i2;
	}

	@Autowired
	public void setI2(INTER2 i2) {
		this.i2 = i2;
	}

	public String nm1()
	{
		return i2.getfm();
	}
	
	public String nm2()
	{
		return i2.getlm();
	}
}


//INTER2

package ASS_16;

public interface INTER2 {

	public String getfm();
	
	public String getlm();
}


//BEAN8

package ASS_16;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class BEAN8 implements INTER2{

	Scanner sc;
	
	@Override
	public String getfm() {
        sc = new Scanner(System.in);
		
		System.out.println("ENTER FIRSTNAME : ");
		String str1 = sc.nextLine();
		
		return str1;
	}

	@Override
	public String getlm() {
        sc = new Scanner(System.in);
		
		System.out.println("ENTER LASTNAME : ");
		String str2 = sc.nextLine();
		
		return str2;
	}

	
}


//appcontext_ASS16_.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
   <context:component-scan base-package="ASS_16"></context:component-scan>
</beans>
===========================================================
17  Create a Spring MVC form where two fields have to be taken as Username & Passord. Username & password can not be null & Password must be 8 characters long. If 
    Username is "admin" and password is "abcd" then a success.jsp should display the Message as "Welcome admin". If any errors are there in the fields then show the errors
    on the same page for the text fields.

=>

//credentails.java

package package1;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

public class credentials {

	@NotNull(message = "REQUIRED")
	@Size(min = 1,message = "REQUIRES SOME VALUE")
	public String usernm;
	
	@NotNull(message = "REQUIRED")
	@Pattern(regexp="^[a-z]{8}",message = "PASSWORD NEEDS 8 CHARACTERS")
	public String passwd;

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getPasswd() {
		return passwd;
	}

	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	
	
}

//ASSIGNcontroller_17.java

package package1;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/controller17")
public class ASSIGN_controller_17 {

	@RequestMapping("/loginform")
	public String loginform(Model m)
	{
		credentials cr = new credentials();
		m.addAttribute("credentials",cr);
		
		return "loginform";	
	}
	
	@RequestMapping("/processform")
	public String processform(@Valid @ModelAttribute("credentials") credentials c,BindingResult bs)
	{
		if(bs.hasErrors())
		{
			return "loginform";
		}
		
		else if(c.getUsernm().contentEquals("admin") && c.getPasswd().contentEquals("abcdabcd"))
		{
				return "success";
		}
		else
		{
				return "failure";
		}
	}
	
}

//loginform.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<style>
.errors
{
   color: red;
}
</style>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form:form action="processform" modelAttribute="credentials">
===============================================================<br>
USERNAME <form:input path="usernm" />
<form:errors path="usernm" cssClass="errors"></form:errors>
===============================================================<br>
PASSWORD <form:input path="passwd" />
<form:errors path="passwd" cssClass="errors"></form:errors>
===============================================================<br>
<input type="submit" value="ENTER">
</form:form>
</body>
</html>

//success.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h2>WELCOME ADMIN</h2>
</body>
</html>

//failure.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
INVALID CREDENTIALS 
</body>
</html>
18  Create bean class Student and access the functionality in the Student class without using any XML configuration file. Use Java code to define configuration.

=>

//student.java

package ass_18;

public class student implements classroom{

	public String getmsg() {
		return "THIS IS A MESSAGE";
		
	}

}

//config.java

package ass_18;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class config {

	@Bean
	public classroom student()
	{
		return new student();
	}
}

//classroom.java

package ass_18;

public interface classroom{

	public String getmsg();
}

//test_main.java

package ass_18;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class test_main {

	public static void main(String[] args) {
	AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(myconfig.class);

	classroom cl = ac.getBean("student",student.class);
	
	System.out.println(cl.getmsg());
	
	}

}
--------------------------------------------------------------------------------------------------------------
19. Create an advice which is printing the output on a pointcut method showMessage as following : 
     1234567891011        ( should come from advice1 )
     Welcome from method  ( Message from Bean Class method )
     ************         ( should come from advice2 )

=>

//Employee.java

package P1;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.stereotype.Component;

@Component
@Aspect
@EnableAspectJAutoProxy
public class Employee {

	@Before("pointcut()")
	public void advice1()
	{
		System.out.println("ADVICE 1 METHOD CALLED....");
	}
	
	@After("pointcut()")
	public void advice2()
	{
		System.out.println("ADVICE 2 METHOD CALLED...");
	}
	
	@Pointcut("execution(public void showmessage())")
	public void pointcut()
	{
		
	}
}


//Staff.java

package P1;

import org.springframework.stereotype.Component;

@Component
public class Staff {

	public void showmessage()
	{
		System.out.println("SHOW MESSAGE METHOD");
	}
}

//myconfig.java

package P1;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan("P1")
public class myconfig {

}

//test.java

package P1;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class test {

	public static void main(String[] args) {
	
	AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(myconfig.class);
	
	Staff st = ac.getBean("staff",Staff.class);
	
	st.showmessage();
	
	ac.close();
	}

}

================================================================
20. Write a configuration class to inject a dependency of one bean class into another bean class using setter injection. BeanA and BeanB are the bean classes.
    BeanA has a method which accepts a number and returns the cube value of the number. Inject the BeanA into BeanB and BeanB has a method which accepts a number and
    returns the square value of the number. Print the Square and cube.


=>


//BeanA

package ASS_20;

public class BeanA {

	public int accnum(int n)
	{
		return n*n*n;
	}
}

//BeanB.java

package ASS_20;

public class BeanB {

	BeanA ba;

	public void setBa(BeanA ba) {
		this.ba = ba;
	}

	public String nam;

	public String getNam() {
		return nam;
	}

	public void setNam(String nam) {
		this.nam = nam;
	}
	
	public int accnum2(int n)
	{
		return n*n;
	}
	
	public int showcube(int n)
	{
		return ba.accnum(n);
	}
	
}

//config.java

package ASS_20;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class config {

	public BeanA getb1()
	{
		return new BeanA();
	}
	
	@Bean
	public BeanB getb2()
	{
		BeanB b = new BeanB();
	    b.setBa(getb1());
	    return b;
	}
	
}


//test.java

package ASS_20;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class test {

	public static void main(String[] args) {
		
	AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(config.class);
	
	BeanB b = ac.getBean("getb2",BeanB.class);
	
    System.out.println("SQAURE OF A VALUE : "+b.accnum2(4));
    
    System.out.println("CUBE OF VALUE : "+b.showcube(4));
	}

}

-------------------------------------------------------------------------------------------------------
21. Create a simple hibernate project without Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.

=>

//users.java

package ASS_21;

public class users {
	
	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	
}
//USERS.HBM.XML

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 4:05:03 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="ASS_21.users" table="USERS789">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="usernm" type="java.lang.String">
            <column name="USERNM" />
        </property>
        <property name="city" type="java.lang.String">
            <column name="CITY" />
        </property>
    </class>
</hibernate-mapping>

//HIBERNATE.CFG.XML

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="users.hbm.xml"></mapping>
    </session-factory>
</hibernate-configuration>


//TEST.java

package ASS_21;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class test {

	public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
    SessionFactory sf = new Configuration().configure().buildSessionFactory();
    
    Session s = sf.openSession();
    
    s.beginTransaction();
    
    users us = new users();
    
	System.out.println("ENTER USER ID : ");
	int id = sc.nextInt();
	
	sc.nextLine();
	
	System.out.println("ENTER USER NAME : ");
	String nm = sc.nextLine();
	
	System.out.println("ENTER USER CITY : ");
	String cy = sc.nextLine();
	
	us.setUsernm(nm);
	us.setUserid(id);
	us.setCity(cy);
	
	s.save(us);
	
	System.out.println("INSERTED SUCCESSFULLY....");

	s.getTransaction().commit();
	
	s.close();
	
	s = sf.openSession();
	
	s.beginTransaction();
	
	users dis = s.get(users.class,id);
	
	System.out.println("USER ID : "+dis.getUserid());
	System.out.println("USER NAME : "+dis.getUsernm());
	System.out.println("USER CITY : "+dis.getCity());

	System.out.println("DISPLAYED SUCCESSFULLY ");
	
	s.getTransaction();
	
	s.close();
	
	sf.close();
	
	sc.close();
	}

}
-------------------------------------------------------------------------------------------------------
22. Create a simple hibernate project with Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.

=>

//pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>DEMO</groupId>
  <artifactId>MAVEN_ASS</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>
  
  <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.4.28.Final</version>
</dependency>
  
  <!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
<dependency>
    <groupId>com.oracle.database.jdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>21.1.0.0</version>
</dependency>
  
  </dependencies>
</project>

//users.java

package ASS_21;

public class users {
	
	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	
}

//users.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 4:05:03 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="ASS_21.users" table="USERS789">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="usernm" type="java.lang.String">
            <column name="USERNM" />
        </property>
        <property name="city" type="java.lang.String">
            <column name="CITY" />
        </property>
    </class>
</hibernate-mapping>


//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="users.hbm.xml"></mapping>
    </session-factory>
</hibernate-configuration>

//test.java

package ASS_21;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class test {

	public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
    SessionFactory sf = new Configuration().configure().buildSessionFactory();
    
    Session s = sf.openSession();
    
    s.beginTransaction();
    
    users us = new users();
    
	System.out.println("ENTER USER ID : ");
	int id = sc.nextInt();
	
	sc.nextLine();
	
	System.out.println("ENTER USER NAME : ");
	String nm = sc.nextLine();
	
	System.out.println("ENTER USER CITY : ");
	String cy = sc.nextLine();
	
	us.setUsernm(nm);
	us.setUserid(id);
	us.setCity(cy);
	
	s.save(us);
	
	System.out.println("INSERTED SUCCESSFULLY....");

	s.getTransaction().commit();
	
	s.close();
	
	s = sf.openSession();
	
	s.beginTransaction();
	
	users dis = s.get(users.class,id);
	
	System.out.println("USER ID : "+dis.getUserid());
	System.out.println("USER NAME : "+dis.getUsernm());
	System.out.println("USER CITY : "+dis.getCity());

	System.out.println("DISPLAYED SUCCESSFULLY ");
	
	s.getTransaction();
	
	s.close();
	
	sf.close();
	
	sc.close();
	}

}

-------------------------------------------------------------------------
23. Create a simple hibernate project without Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.

=>

//users2.java

package ASS_23;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "user456")
public class users2 {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

}

//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="users.hbm.xml"></mapping>
    </session-factory>
</hibernate-configuration>

//test.java

package ASS_23;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class test2 {

	public static void main(String[] args) {

    Scanner sc = new Scanner(System.in);
	
    SessionFactory sf = new Configuration().configure().addAnnotatedClass(users2.class).buildSessionFactory();
    
    Session s = sf.openSession();
    
    s.beginTransaction();
    
    users2 us = new users2();
    
	System.out.println("ENTER USER ID : ");
	int id = sc.nextInt();
	
	sc.nextLine();
	
	System.out.println("ENTER USER NAME : ");
	String nm = sc.nextLine();
	
	System.out.println("ENTER USER CITY : ");
	String cy = sc.nextLine();
	
	us.setUsernm(nm);
	us.setUserid(id);
	us.setCity(cy);
	
	s.save(us);
	
	System.out.println("INSERTED SUCCESSFULLY....");

	s.getTransaction().commit();
	
	s.close();
	
	s = sf.openSession();
	
	s.beginTransaction();
	
	System.out.println("ENTER SNO : ");
	int sno = sc.nextInt();
	
	users2 dis = s.get(users2.class,sno);
	
	System.out.println("USER ID : "+dis.getUserid());
	System.out.println("USER NAME : "+dis.getUsernm());
	System.out.println("USER CITY : "+dis.getCity());

	System.out.println("DISPLAYED SUCCESSFULLY ");
	
	s.getTransaction();
	
	s.close();
	
	sf.close();
	
	sc.close();
	}
}
-----------------------------------------------------------------------------------------------------
24. Create a simple hibernate project with Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.

=>

//pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>DEMO</groupId>
  <artifactId>MAVEN_ASS</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.4</version>
</dependency>
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>5.3.4</version>
</dependency>
 
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-beans</artifactId>
    <version>5.3.4</version>
</dependency>
  
  <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.4.28.Final</version>
</dependency>
  
  <!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
<dependency>
    <groupId>com.oracle.database.jdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>21.1.0.0</version>
</dependency>
  
  </dependencies>
</project>

//users3.java

package ASS_24;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "user567")
public class users3 {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

}

//test3.java

package ASS_24;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class test3 {

	public static void main(String[] args) {

	    Scanner sc = new Scanner(System.in);
		
	    SessionFactory sf = new Configuration().configure().addAnnotatedClass(users3.class).buildSessionFactory();
	    
	    Session s = sf.openSession();
	    
	    s.beginTransaction();
	    
	    users3 us = new users3();
	    
		System.out.println("ENTER USER ID : ");
		int id = sc.nextInt();
		
		sc.nextLine();
		
		System.out.println("ENTER USER NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER USER CITY : ");
		String cy = sc.nextLine();
		
		us.setUsernm(nm);
		us.setUserid(id);
		us.setCity(cy);
		
		s.save(us);
		
		System.out.println("INSERTED SUCCESSFULLY....");

		s.getTransaction().commit();
		
		s.close();
		
		s = sf.openSession();
		
		s.beginTransaction();
		
		System.out.println("ENTER SNO : ");
		int sno = sc.nextInt();
		
		users3 dis = s.get(users3.class,sno);
		
		System.out.println("USER ID : "+dis.getUserid());
		System.out.println("USER NAME : "+dis.getUsernm());
		System.out.println("USER CITY : "+dis.getCity());

		System.out.println("DISPLAYED SUCCESSFULLY ");
		
		s.getTransaction();
		
		s.close();
		
		sf.close();
		
		sc.close();
		}
}
-------------------------------------------------------------------------

25. Create a dynamic hibernate project without Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Console.

=>
//users3.java

package ASS_24;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "user567")
public class users3 {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

}

//test3.java

package ASS_24;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class test3 {

	public static void main(String[] args) {

	    Scanner sc = new Scanner(System.in);
		
	    SessionFactory sf = new Configuration().configure().addAnnotatedClass(users3.class).buildSessionFactory();
	    
	    Session s = sf.openSession();
	    
	    s.beginTransaction();
	    
	    users3 us = new users3();
	    
		System.out.println("ENTER USER ID : ");
		int id = sc.nextInt();
		
		sc.nextLine();
		
		System.out.println("ENTER USER NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER USER CITY : ");
		String cy = sc.nextLine();
		
		us.setUsernm(nm);
		us.setUserid(id);
		us.setCity(cy);
		
		s.save(us);
		
		System.out.println("INSERTED SUCCESSFULLY....");

		s.getTransaction().commit();
		
		s.close();
		
		s = sf.openSession();
		
		s.beginTransaction();
		
		System.out.println("ENTER SNO : ");
		int sno = sc.nextInt();
		
		users3 dis = s.get(users3.class,sno);
		
		System.out.println("USER ID : "+dis.getUserid());
		System.out.println("USER NAME : "+dis.getUsernm());
		System.out.println("USER CITY : "+dis.getCity());

		System.out.println("DISPLAYED SUCCESSFULLY ");
		
		s.getTransaction();
		
		s.close();
		
		sf.close();
		
		sc.close();
		}


26. Create a dynamic hibernate project with Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Web Page.

=>

//users3.java

package ASS_24;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "user567")
public class users3 {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

}

//test3.java

package ASS_24;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class test3 {

	public static void main(String[] args) {

	    Scanner sc = new Scanner(System.in);
		
	    SessionFactory sf = new Configuration().configure().addAnnotatedClass(users3.class).buildSessionFactory();
	    
	    Session s = sf.openSession();
	    
	    s.beginTransaction();
	    
	    users3 us = new users3();
	    
		System.out.println("ENTER USER ID : ");
		int id = sc.nextInt();
		
		sc.nextLine();
		
		System.out.println("ENTER USER NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER USER CITY : ");
		String cy = sc.nextLine();
		
		us.setUsernm(nm);
		us.setUserid(id);
		us.setCity(cy);
		
		s.save(us);
		
		System.out.println("INSERTED SUCCESSFULLY....");

		s.getTransaction().commit();
		
		s.close();
		
		s = sf.openSession();
		
		s.beginTransaction();
		
		System.out.println("ENTER SNO : ");
		int sno = sc.nextInt();
		
		users3 dis = s.get(users3.class,sno);
		
		System.out.println("USER ID : "+dis.getUserid());
		System.out.println("USER NAME : "+dis.getUsernm());
		System.out.println("USER CITY : "+dis.getCity());

		System.out.println("DISPLAYED SUCCESSFULLY ");
		
		s.getTransaction();
		
		s.close();
		
		sf.close();
		
		sc.close();
		}

27. Create a dynamic hibernate project with Maven to define a POJO class Users (with annotation). Take userid,username,city from user and print all details on the
    Web Page.

=>

//users3.java

package ASS_24;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "user567")
public class users3 {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int userid;
	
	public String usernm;
	
	public String city;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsernm() {
		return usernm;
	}

	public void setUsernm(String usernm) {
		this.usernm = usernm;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

}

//test3.java

package ASS_24;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class test3 {

	public static void main(String[] args) {

	    Scanner sc = new Scanner(System.in);
		
	    SessionFactory sf = new Configuration().configure().addAnnotatedClass(users3.class).buildSessionFactory();
	    
	    Session s = sf.openSession();
	    
	    s.beginTransaction();
	    
	    users3 us = new users3();
	    
		System.out.println("ENTER USER ID : ");
		int id = sc.nextInt();
		
		sc.nextLine();
		
		System.out.println("ENTER USER NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER USER CITY : ");
		String cy = sc.nextLine();
		
		us.setUsernm(nm);
		us.setUserid(id);
		us.setCity(cy);
		
		s.save(us);
		
		System.out.println("INSERTED SUCCESSFULLY....");

		s.getTransaction().commit();
		
		s.close();
		
		s = sf.openSession();
		
		s.beginTransaction();
		
		System.out.println("ENTER SNO : ");
		int sno = sc.nextInt();
		
		users3 dis = s.get(users3.class,sno);
		
		System.out.println("USER ID : "+dis.getUserid());
		System.out.println("USER NAME : "+dis.getUsernm());
		System.out.println("USER CITY : "+dis.getCity());

		System.out.println("DISPLAYED SUCCESSFULLY ");
		
		s.getTransaction();
		
		s.close();
		
		sf.close();
		
		sc.close();
		}

28. Make a Spring MVC project to enter the age of a student in the web page. After clicking on submit button Year of birth should be displayed on the web page.If the age
    entered is not a number then it should display the error message on the field.

=> //maincontroller.java

package Pack;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller 
public class main1 {

	@RequestMapping("/assign28")
	public String meth(Model m)
	{
		student st = new student();
		m.addAttribute("student",st);
		return "form";
	}
	
	@RequestMapping("/process1")
	public String meth2(@Valid @ModelAttribute("student") student st,Model m,BindingResult bs)
	{
		if(bs.hasErrors())
		{
			return "form";
		}
		else
		{
			m.addAttribute("a",st.getAge());
			
			return "display";
		}
	}
}

//student.java

package Pack;

import javax.validation.constraints.NotNull;

public class student {

	@NotNull(message="CANNOT BE 0")
	public Integer age;

	public student()
	{
		
	}
	public student(Integer age) {
		super();
		this.age = age;
	}

	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}
	
	
}

//form.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
<!DOCTYPE html>
<html>
<head>
<style>
errors
{
    color: red;
}
</style>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form:form action="process1" method="get" modelAttribute="student">
AGE <form:input type="number" path="age" />
<form:errors path="age" cssClass="errors"></form:errors>
<input type="submit" value="ENTER">
</form:form>
</body>
</html>

//display.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<%
int age = (Integer)request.getAttribute("a");

int year = 2021 - age;
%>

<%="YOUR BIRTH YEAR IS : "+year %>
</body>
</html>

//messages.properties

typeMismatch.student.age=Invalid Number

=================================================
29. Make a spring MVC project to take firstname, lastname and create a dropdown list of Countries. If selected country by the user is India then display a page showing 
    fullname of user with a message "Welcome to India". If selected country by the user is USA then display a page showing fullname of user with a message "Welcome to 
    USA".Firstname & Lastname field should not be empty. 

=>

//form.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<table border="2">
<form:form action="process" modelAttribute="tourist">
<tr><td>FIRSTNAME</td><td><form:input type="text" path="fnm" /></td></tr>
<tr><td>LASTNAME</td><td><form:input type="text" path="lnm" /></td></tr>
<tr><td>GENDER</td><td>MALE<form:radiobutton path="gender" value="MALE" />FEMALE<form:radiobutton path="gender" value="FEMALE" /></td></tr>
<tr><td>COUNTRY</td><td>
<form:select path="country">
<form:option value="INDIA">INDIA</form:option>
<form:option value="AUSTRALIA">AUSTRALIA</form:option>
<form:option value="USA">USA</form:option>
</form:select></td></tr>
<tr><td><input type="submit" value="SUBMIT"></td><td><input type="reset" value="clear"></td></tr>
</form:form>
</table>
</body>
</html>

//maincontroller.java
package Pack;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class main2 {

	@RequestMapping("/assign29")
	public String meth(Model m)
	{
		tourist t = new tourist();
		m.addAttribute("tourist",t);
		return "form2";
	}
	
	@RequestMapping("/process")
	public String get(@ModelAttribute("tourist") tourist tr,Model m)
	{
	   	m.addAttribute("tr",tr);
	   	
	   	return "display2";
	}
}

//tourist.java

package Pack;

import javax.validation.constraints.NotNull;

public class tourist {

	@NotNull(message="is required")
	public String fnm;
	
	@NotNull(message="is required")
	public String lnm;
	
	public String country;
	
	public String gender;

	public tourist(String fnm, String lnm, String country, String gender) {
		super();
		this.fnm = fnm;
		this.lnm = lnm;
		this.country = country;
		this.gender = gender;
	}

	public String getFnm() {
		return fnm;
	}

	public void setFnm(String fnm) {
		this.fnm = fnm;
	}

	public String getLnm() {
		return lnm;
	}

	public void setLnm(String lnm) {
		this.lnm = lnm;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}
	
	public tourist()
	{
		
	}
}

//display2.jsp

<%@page import="Pack.tourist"%>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<%

tourist tr =(tourist)request.getAttribute("tr");

    String fnm = tr.getFnm();
	String lnm = tr.getLnm();
	String gender = tr.getGender();
	String country = tr.getCountry();


String msg = null;
if(gender.equals("MALE"))
{
	if(country.equals("INDIA"))
	{
	msg = "WELCOME MR."+fnm+" "+lnm+" ,YOU ARE FROM INDIA";
	}
	else
	{
	msg = "WELCOME MR."+fnm+" "+lnm+" ,YOU ARE FROM NRI";
	}
}
else if(gender.equals("FEMALE"))
{
	if(country.equals("INDIA"))
{
	msg = "WELCOME MISS."+fnm+" "+lnm+" ,YOU ARE FROM FROM INDIA";
}
else
{
	msg = "WELCOME MISS."+fnm+" "+lnm+" ,YOU ARE FROM NRI";
}
}


%>
</body>
</html>
/////////////////////////////////////////////////////////////////////////////////////////////////////////
30. Create a JDBC project in spring to insert employee record like eid,ename,salary,city in the database table. Save 5 employee records and Display all records from the 
    table.

=>

//employee.java

package ASS_30;

public class employee {

	public int eid;
	
	public String name;
	
	public int salary;
	
	public String city;

	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}
	
	
}

//empDAO.JAVA

package ASS_30;

import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;

public class empDAO {

	public JdbcTemplate jt;

	public void setJt(JdbcTemplate jt) {
		this.jt = jt;
	}
	
	public int insertion(employee e)
	{
		String q = "insert into emp234 values(?,?,?,?)";
		System.out.println("INSERTED RECORDS INTO THE TABLES");
		return jt.update(q,e.getEid(),e.getName(),e.getSalary(),e.getCity());
	}
	
	public List<employee> getdetails()
	{
		String q = "select * from emp234";
		List<employee> ls = jt.query(q,new EmployeeMapper());
		return ls;
	}
}


//appcontext_30.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
    <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
    <property name="username" value="system"></property>
    <property name="password" value="root"></property>
    </bean>
    
    <bean id="JdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="ds"></property>
    </bean>
    
    <bean id="em" class="ASS_30.empDAO">
    <property name="jt" ref="JdbcTemplate"></property>
    </bean>
    
</beans>

//EmployMappr.java

package ASS_30;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

public class EmployeeMapper implements RowMapper<employee>{

	public employee mapRow(ResultSet rs, int rowNum) throws SQLException {
	
		employee e = new employee();
		e.setEid(rs.getInt("eid"));
		e.setName(rs.getString("name"));
        e.setSalary(rs.getInt("salary"));
		e.setCity(rs.getString("city"));
		return e;
	}

}

//test.java

package ASS_30;

import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {

	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_30.xml");
	
	empDAO em = ac.getBean("em",empDAO.class);
	
	employee e = new employee();
	
    e.setEid(784);
    e.setName("HIMAYUN");
    e.setSalary(83000);
    e.setCity("AGRA");
    
    int status = em.insertion(e);
    System.out.println(status);
    
    List<employee> l = em.getdetails();
    
    for(employee en : l)
    {
    	System.out.println(en.getEid()+" "+en.getName()+" "+en.getSalary()+" "+en.getCity());
    }
	}

}
